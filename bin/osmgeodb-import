#!/usr/bin/env python
#
# osmgeodb - GIS database for OpenStreetMap data
#
# Copyright (C) 2011-2019 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import logging
import uvloop
import zmq

from concurrent.futures import ProcessPoolExecutor, as_completed
from functools import partial
from zmq.asyncio import Context

from osmgeodb.posindex import receive_pos_index, send_pos_index, create_pos_index
from osmgeodb.reader import read_messages
from osmgeodb.processor import process_messages
from osmgeodb.socket import monitor_socket, send_messages, exit_on_cancel

logger = logging.getLogger(__name__)

def get_loop():
    """
    Install uvloop and return asyncio event loop.
    """
    uvloop.install()
    loop = asyncio.get_event_loop()
    return loop

def osm_reader(fn):
    """
    Read data from OSM PBF file and send it to data processors.

    :param fn: OSM PBF file name.
    """
    loop = get_loop()

    with open(fn, 'rb') as f:
        messages = read_messages(f)
        task = send_messages(messages)
        try:
            loop.run_until_complete(task)
        finally:
            logger.info('reader exit')

def osm_processor():
    """
    Process OSM nodes, ways and relations and store them as positions,
    lines and areas.
    """
    loop = get_loop()

    ctx = zmq.asyncio.Context()
    socket = ctx.socket(zmq.PULL)
    socket.connect('tcp://127.0.0.1:5557')

    queue = asyncio.Queue(32)
    t0 = send_pos_index(queue)
    processor = {
        'dense_nodes': queue,
    }
    t1 = process_messages(socket, processor)
    t2 = monitor_socket(socket, zmq.EVENT_CLOSED)
    try:
        loop.run_until_complete(asyncio.gather(t1, t2, t0))
    finally:
        t0.close()
        socket.close()
        logger.info('processor exit')

def collector():
    """
    Create index of OSM nodes and OSM ways.
    """
    loop = get_loop()

    ctx = zmq.asyncio.Context()
    socket = ctx.socket(zmq.PULL)
    socket.bind('tcp://127.0.0.1:5558')

    pos_index = create_pos_index()
    t1 = exit_on_cancel(receive_pos_index(socket, pos_index))
    t2 = monitor_socket(socket, zmq.EVENT_DISCONNECTED)

    try:
        loop.run_until_complete(asyncio.gather(t1, t2))
    finally:
        logger.info('collector exit')


parser = argparse.ArgumentParser(description='osmgeodb')
parser.add_argument('input', help='OSM data file')

args = parser.parse_args()

logging.basicConfig(level=logging.DEBUG)

with ProcessPoolExecutor() as pool:
    tasks = [
        partial(osm_reader, args.input),
        collector,
    ]
    tasks.extend([osm_processor] * 4)
    tasks = [pool.submit(f) for f in tasks]
    for t in as_completed(tasks):
        t.result()

logger.info('all processes done')

# vim: sw=4:et:ai
