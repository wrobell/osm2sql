#!/usr/bin/env python
#
# osmgeodb - GIS database for OpenStreetMap data
#
# Copyright (C) 2011-2019 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import logging
import uvloop
import setproctitle
import zmq

from concurrent.futures import ProcessPoolExecutor, as_completed
from multiprocessing import cpu_count
from functools import partial
from zmq.asyncio import Context

from osmgeodb.posindex import receive_pos_index, send_pos_index, create_pos_index
from osmgeodb.processor import process_messages
from osmgeodb.reader import read_messages
from osmgeodb.sbuff import SynchronizedBuffer
from osmgeodb.socket import monitor_socket, send_messages
from osmgeodb.stats import receive_stats, send_stats
from osmgeodb.storage import store_data

logger = logging.getLogger(__name__)

HWM = 16
SYNC_BUFF_SIZE = 10000

def get_loop():
    """
    Install uvloop and return asyncio event loop.
    """
    uvloop.install()
    loop = asyncio.get_event_loop()
    return loop

def osm_reader(fn):
    """
    Read data from OSM PBF file and send it to data processors.

    :param fn: OSM PBF file name.
    """
    setproctitle.setproctitle('osmgeodb: reader')
    loop = get_loop()

    ctx = zmq.asyncio.Context()
    socket = ctx.socket(zmq.PUSH)
    socket.set_hwm(HWM)
    socket.bind('tcp://127.0.0.1:5557')

    with open(fn, 'rb') as f:
        loop.create_task(monitor_socket('reader', socket))
        try:
            messages = read_messages(f)
            task = send_messages(socket, messages)
            loop.run_until_complete(task)

            # close socket but wait to send all pending data (default linger)
            socket.close()
            logger.info('data read and sent successfully')
        except:
            socket.close(0)
            raise
        finally:
            logger.info('reader exit')

def osm_processor(dsn):
    """
    Process OSM nodes, ways and relations and store them as positions,
    lines and areas.
    """
    setproctitle.setproctitle('osmgeodb: processor')
    loop = get_loop()

    ctx = zmq.asyncio.Context()

    socket = ctx.socket(zmq.PULL)
    socket.set_hwm(HWM)
    socket.connect('tcp://127.0.0.1:5557')

    s_index = ctx.socket(zmq.PUSH)
    s_index.connect('tcp://127.0.0.1:5558')

    s_stats = ctx.socket(zmq.PUSH)
    s_stats.connect('tcp://127.0.0.1:5559')

    try:
        loop.create_task(monitor_socket('processor', socket))

        buffers = {
            'dense_nodes': SynchronizedBuffer(SYNC_BUFF_SIZE),
            'ways': SynchronizedBuffer(SYNC_BUFF_SIZE),
        }

        t1 = process_messages(socket, buffers, s_index, s_stats)
        t2 = store_data(dsn, buffers['dense_nodes'], 'osm_point', ('id', 'location', 'tags'))
        t3 = store_data(dsn, buffers['ways'], 'osm_line', ('id', 'refs', 'tags'))
        loop.run_until_complete(asyncio.gather(t1, t2, t3))

        s_index.close()
        s_stats.close()
    except:
        socket.close(0)
        s_index.close(0)
        s_stats.close(0)
        raise
    finally:
        logger.info('processor exit')

def data_indexer():
    """
    Create index of OSM nodes and OSM ways.
    """
    setproctitle.setproctitle('osmgeodb: indexer')
    loop = get_loop()

    ctx = zmq.asyncio.Context()
    socket = ctx.socket(zmq.PULL)
    socket.bind('tcp://127.0.0.1:5558')

    pos_index = create_pos_index()
    t1 = receive_pos_index(socket, pos_index)
    t2 = monitor_socket('indexer', socket)

    try:
        loop.run_until_complete(asyncio.gather(t1, t2))
    finally:
        logger.info('data indexer exit')

def stats_collector():
    """
    Create index of OSM nodes and OSM ways.
    """
    setproctitle.setproctitle('osmgeodb: stats')
    loop = get_loop()

    ctx = zmq.asyncio.Context()
    socket = ctx.socket(zmq.PULL)
    socket.bind('tcp://127.0.0.1:5559')

    pos_index = create_pos_index()
    t1 = receive_stats(socket)
    t2 = monitor_socket('stats', socket)

    try:
        loop.run_until_complete(asyncio.gather(t1, t2))
    finally:
        logger.info('stats collector exit')


parser = argparse.ArgumentParser(description='osmgeodb')
parser.add_argument('input', help='OSM data file')
parser.add_argument('dsn', help='PostgreSQL connection string')

args = parser.parse_args()

logging.basicConfig(level=logging.DEBUG)

n_cpu = cpu_count()
# add low churn reader and indexer processes
with ProcessPoolExecutor(n_cpu + 3) as pool:
    tasks = [
        partial(osm_reader, args.input),
        data_indexer,
        stats_collector,
    ]
    f = partial(osm_processor, args.dsn)
    tasks.extend([f] * n_cpu)
    tasks = [pool.submit(f) for f in tasks]
    for t in as_completed(tasks):
        t.result()

logger.info('all processes done')

# vim: sw=4:et:ai
