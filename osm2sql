#!/usr/bin/env python3

#
# osm2sql - script to convert OpenStreetMap data into SQL spatial database.
#
# Copyright (C) 2009 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import lxml.etree as et
import bz2
import os.path
import sys

quote = lambda s: s.replace('"', '').replace('\'', '').replace('\\', '')
get_tags = lambda n: ','.join('"{0}" => "{1}"'.format(k, quote(v))
            for k, v in zip(FIND_TAG_K(n), FIND_TAG_V(n)))

FMT_POINT = 'POINT({} {})'.format

FIND_TAG_K = et.XPath('tag/@k')
FIND_TAG_V = et.XPath('tag/@v')
FIND_NODE_ID = et.XPath('nd/@ref')

print("""
begin;

drop index if exists idx_osm_point_t;
drop index if exists idx_osm_line_t;
drop table if exists osm_point;
drop table if exists _osm_line;

create table osm_point (
    id bigint,
    tags hstore, location geography(point, 4326),
    primary key (id)
);
create index idx_osm_point_t on osm_point using gin (tags);

create table _osm_line (
    id bigint,
    tags hstore,
    points bigint[],
    primary key (id)
);
create index idx_osm_line_t on _osm_line using gin (tags);

""")

fin = sys.argv[1]
if os.path.splitext(fin)[1] == '.bz2':
    fin = bz2.BZ2File(fin)

last = ''
f = et.iterparse(fin)
print("copy osm_point (id, location, tags) from stdin with null as \'\';")
for _, n in f:
    if n.tag == 'node':
        id = n.get('id')
        pt = FMT_POINT(n.get('lon'), n.get('lat'))
        tags = get_tags(n)
        print('\t'.join((id, pt, tags)))

    elif n.tag == 'way':
        if last != 'way':
            print('\.\n')
            print('copy _osm_line (id, tags, points) from stdin with null as \'\';')
        id = n.get('id')
        tags = get_tags(n)
        points = '{' + ','.join(FIND_NODE_ID(n)) + '}'
        print('\t'.join((id, tags, points)))
    elif n.tag == 'relation':
        pass

    # clear memory
    last = n.tag
    n.clear()

    parent = n.getparent()
    ps = n.getprevious()
    while ps is not None:
        parent.remove(ps)
        ps = n.getprevious()

print('\.')
print('commit;')

# vim: sw=4:et:ai
